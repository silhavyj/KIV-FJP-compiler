#pragma once

#include <vector>

#include <isa.h>

namespace FJP {

    /// This class represents a code generated by the parser.
    /// The code is writen in an extended an slightly customized version
    /// of the PL0 programming language.
    class GeneratedCode {
    private:
        std::vector<Instruction> code; ///< all instructions that make up the program

    public:
        /// Constructor - creates an instance of the class
        GeneratedCode();

        /// Returns the total size of the code (number of instructions)
        /// \return the current number of instructions the code consists of
        int getSize() const;

        /// Overloaded [] operator for accessing instructions as
        /// if the code was an array. This is used when modifying
        /// certain instructions after they're inserted into the code.
        /// For example, the JMP or JPC instruction.
        /// \param index the index of the instruction we want to access
        /// \return returns the instruction
        Instruction &operator[](size_t index);

        /// Adds another instruction into the code.
        /// \param instruction the instruction that is about to be added into the code.
        void addInstruction(FJP::Instruction instruction);
    };
}